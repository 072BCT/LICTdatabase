@model LICTProject.Models.Personnel

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Create";
}


<!-- /.box-header -->


@using (Html.BeginForm("Create", "Personnels", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<div class="box-body">
    <div class="col-md-offset-3">
        <div class="col-md-8">
                <div class="box-body">
                    <div class="form-horizontal">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="badge col-md-offset-4">
                                    <div id="imgPreview" class="thumbnail">
                                        <img src='~/dist/img/default.png' class="img-responsive" id="targetImg" style="max-height:250px; max-width:250px" />
                                        <div class="caption" style="align-content:center" id="description">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-10">
                                            <input type="file" name="UploadImages" id="UploadImages" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            
        </div>
    </div>
   
   
    <div class="row">
        <div class="form-horizontal">
            <div class="col-md-6">
                <div class="box box-danger bg-gray">
                    <div class="box-body">

                        <div class="form-group has-feedback">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8 input-group">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Title", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group has-feedback">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8 input-group">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @placeholder = "First Name" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group has-feedback">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8 input-group">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Last Name" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="box box-danger bg-gray">
                    <div class="box-body">


                        <div class="form-group has-feedback">
                            <label class="col-md-offset-2 ">LICT Title</label>
                            <div class=" col-md-offset-2 col-md-8 input-group">
                                @Html.DropDownList("LICT_Title", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LICT_Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                       
                        <div class="form-group has-feedback">
                            <label class="col-md-offset-2 ">Post at IOE</label>
                            <div class=" col-md-offset-2 col-md-8 input-group">
                                <div class="input-group-addon ">
                                    <i class="fa fa-podcast"></i>
                                </div>
                                @Html.EditorFor(model => model.PostAtIOE, new { htmlAttributes = new { @class = "form-control", @placeholder = "Post At IOE", @autocomplete="off" } })
                                @Html.ValidationMessageFor(model => model.PostAtIOE, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="box box-danger bg-gray">
        <div class="box-body">
            <div class="box-header" style="margin-top:0px">
                <p class="box-header" style="text-align: center; font-size:x-large; font-weight:bolder "><b>CONTACT DETAILS</b></p>
            </div>
            <div class="form-group has-feedback">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="col-md-8 input-group">
                    <div class="input-group-addon ">
                        <i class="fa fa-envelope"></i>
                    </div>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group has-feedback">
                @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="col-md-8 input-group">
                    <div class="input-group-addon ">
                        <i class="fa fa-phone"></i>
                    </div>
                    @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Contact" } })
                    @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group has-feedback">
                @Html.LabelFor(model => model.Urls, htmlAttributes: new { @class = "control-label col-md-2" })
                
                <div class="col-md-8 input-group">
                    <div class="input-group-addon ">
                        <i class="fa fa-chain"></i>
                    </div>
                    @Html.EditorFor(model => model.Urls, new { htmlAttributes = new { @class = "form-control", @placeholder = "Urls", @autocomplete="off" } })
                    @Html.ValidationMessageFor(model => model.Urls, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
 
        <div class="form-group has-feedback">
            <div class="col-md-12">
                <input type="submit" value="Add" class="btn btn-primary btn-block btn-flat" />
            </div>

        </div>
   
</div>

   
    
}
               


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*To preview image even before uploading. id = Uploadimage from above div is changed when image is browsed
    and so that changed feature is used for previewing!!*@
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>
    $(document).ready(function () {
        $("#UploadImages").change(function () {
            $("description").text("");
            var File = this.files;
            if (File && File[0]) {
                ReadImage(File[0]);
            }

        })
    })
    var ReadImage = function (file) {
        var reader = new FileReader;
        var image = new Image;
        reader.readAsDataURL(file);
        reader.onload = function (_file) {
            image.src = _file.target.result;
            image.onload = function () {
                var height = this.height;
                var width = this.width;
                var type = file.type;
                var size = ~~(file.size / 1024) + "KB";
                $("#targetImg").attr('src', _file.target.result);
                $("#description").text("size: " + size);
                $("#imgPreview").show();
            }
        }
    }
    var ClearPreview = function () {
        $("#targetImg").attr('src', );
        $("#UploadImages").val('');
        $("#description").text('');
        $("#imgPreview").show();

    }
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

